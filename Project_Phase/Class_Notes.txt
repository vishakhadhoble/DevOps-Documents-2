########################
Day 14 - 1st July 2024
########################

		
		Capstone Project Discussion! 8th & 9th of July 
		
		Jenkins :: Build Orchestration Tool 
		
		As a Developer 
		
			- Developers are just the consumers of Jenkins Jobs.
				- Execute the Job/Pipelines 
				- Cancel the builds 
				- View the workspace and job config
				
		
		As a Devops Team :
		
			- Owner of Jenkins Tool at enterprise level!
			
		Role of Jenkins Administrator ::::
		
			- Installation of Jenkins 
			- Plugins Management 
			- User Management 
			- Security Management 
			- Tools Management 
			- Jenkins Global system Management 
			- Credentials Management 
			- Jenkins Master and Slave Node Configurations and Management
			- Create CICD pipelines to Automate Application Builds and Deployments
			- Onboard Applications to Jenkins CICD Pipeline Process 
			- Periodic Upgrade of Jenkins and all its plugins 
			- Back-up and Recovery of Jenkins Server and Components 
			- Trouble-shooting 
			
			
		Kubernetes
		
			- Deployment Tools 
			
			- Kubernetes Developer
			
			- Kubernetes Administrator
			
			- Kubernetes Security Administrator
			
					- API Server!
					
						RBAC - Role Based Access Control 
							Cluster Level 
							
							Namespace Level 
							
						Authentication
						
						Authorization
			
			
			
		8th & 9th of July - Capstone Project Discussion!

			- LMS Portal 
			
				- Project Documentations 
		
					Banking Domain
						- Banking Domain Knowledge 
						- Banking Domain DevOps Project Document 
					
					Healthcare Domain
						- Healthcare Domain Knowledge 
						- Healthcare Domain DevOps Project Document 

		
		Pre-requisites ::

			Banking Domain					---> 	
				- Banking Domain Knowledge 
			
			Healthcare Domain
				- Healthcare Domain Knowledge 

			Complete all your assignments (If Possible)
			
			Revise all the DevOps Modules - GIT/Jenkins/Docker/Kubernetes/Ansible 

			
			1. Create CICD Pipeline to :
			
				SCM_Checkout
				Application_Build
				Application_Image_Build(Using Ansible)
				Publish Application_Image to Container Registry(Using Ansible)
				Deploy Application_Image and Run Container in QA_Target_Server(Using Ansible)
					- using port mapping 
				Send Email Notification to the Testing Team 
				
				Selenium/Selenium-Grid  
				TestNG 
				JUnit 
				
				
			2. Create a Pipeline to :
			
				Periodically, Clean-up the Outdated Workspace folders,Application_Artifacts,Application_Images from Build_Server(Jenkins_SlaveNode) - Once in 3 Days @10PM
			
			3. Explore how the .Net Applications are built and deployed - Just aware of the .net applications build, test and deployment tools ****
			
			
			
			
			
			
				SCM_Checkout
				Application_Build
				Application_Image_Build(Using Ansible)
				Publish Application_Image to Container Registry(Using Ansible)
				Deploy Application_Image and Run Container in QA_Target_Server(Using Ansible)
					- using port mapping 
				Send Email Notification to the Testing Team 
				Automated Testing using Selenium/Selenium-Grid & TestNG 
					 - Test Data/Scenarios/Cases  ---> It will be part of Repository
					 
				Send Email Notification to the Testing Team and Dev Team 
			
			
			
			
			
				Java Applications :
					Maven Applications - CICD 
					
					.net 
					python
					Angular
					NodeJS 
					COBOL 
					Ruby 
					C/C++ 	 Embedded Applications  
					
			
					
	DevOps Tools Stack
	
	
		Dev Environment
			- servers
				Dev_Servers/Machines,Integrated with remote-repo(github),SonarQubeAnalyzer(Code Quality Checking),Artifactories
		Build Environments
			- servers 
				Build_Server/Machines,Integrated with Build Tools(maven/gradle),Docker Contaier_Engine,Container Registries,Artifactories
		Test Environments
			- servers 
				QA_server/Machines, Testing Tools/Test Grids,Artifactories
				UAT_Server/Machines, Testing Tools,Artifactories
		Prod Environments
			- Prod_Server/Clusters, Deployment Tools - Kubernetes,Openshift/XLR/XLD
					- Replicas of Prod Servers
					
					
		CICD : Servers - Jenkins Master and Slave_Nodes.
					

					
########################
Day 15 - 8th July 2024
########################


	Project Discussion : 8th & 9th of July
	
	Problem Statement
					
		
		- Project Documentations 

			Banking Domain
				- Banking Domain Knowledge 
				- Banking Domain DevOps Project Document 
			
			Healthcare Domain
				- Healthcare Domain Knowledge 
				- Healthcare Domain DevOps Project Document 
					
		
		
		- Banking Domain DevOps Project Document 					
		- Healthcare Domain DevOps Project Document 					

	Implementation :::

		DevOps 
		
		CICD Pipeline : 
		
			Containerized Deployment using Kubernetes 
			
			
		Task 1: Infra-Structure
		
			Create VMs using Terraform and Configure the VMs using Ansible 
			
		Task 2:	Build & Deployments
		
			CICD Pipeline 
			
			
			
			
		Infra-Structure :::	Ubuntu - v22.04
		
			How many VMs we need to create and configure to implement CICD ?
			
				CICD ::	5 VMs
					
						Jenkins_Master 		#VM
							Jenkin_Slave 
						Kubernetes_Master
							Kubernetes_WorkerNode1
							Kubernetes_WorkerNode2
				
					Purpose of each VM ?
					
						Jenkins_Master				# Create & Schedule CICD Pipeline Jobs	
							Jenkin_Slave 			# To Perform Builds App. Build & Docker Build
						Kubernetes_Master			# To Deploy the Pods 
							Kubernetes_WorkerNode1
							Kubernetes_WorkerNode2								
		
				Infra-Structure :: 1 VM (Terraform,Ansible)
			    	Ansible_Controller 									# To Configure Jenkins_Slave Node 
					Terraform Server(Install in local Windows Machine	# To Provision Jenkins_Slave Node
		
				Monitoring :: 1 VM 
				
					Prometheus/Grafana 
					
					
					
		Tools :::

				CICD ::
				
					Jenkins_Master					# jdk,jenkins,git
						Jenkin_Slave(Build_Server)	# git,jdk,maven,docker
					Kubernetes_Master				# cri,kubelet,kubectl,kubeadm,...
						Kubernetes_WorkerNode1
						Kubernetes_WorkerNode2
												
				Infra-Structure ::		VM for Ansible Controller
					Jenkin_Slave(Build_Server)		# git,jdk,maven,docker
					Monitoring						# Prometheus & Grafana
					
						Create Build_Server using Terraform 
						Configure Build Tools using Ansible 
				
				
		Integration of Servers/VMs :::
		
				Jenkins_Master					
                	Jenkin_Slave(Build_Server)	
                Kubernetes_Master				
		        	Kubernetes_WorkerNode1
		        	Kubernetes_WorkerNode2

		
		CICD Pipeline Job/Project :::
		
			CICD Piepline : To Automate Build & Deployment of Containerized Applications
			
				SCM_Checkout
				Application Build
				Docker Image Build 
				Pubish Docker Image to container Registry 
				Deploy to Kubernetes
				
		
		Onboard the Applications :::
		
				SCM_Checkout		(Banking Application Src_Code Repository Clone URL)
				Application Build
				Docker Image Build 
				Pubish Docker Image to container Registry 
				Deploy to Kubernetes			
		
		
				SCM_Checkout		(Healthcare Application Src_Code Repository Clone URL)
				Application Build
				Docker Image Build 
				Pubish Docker Image to container Registry 
				Deploy to Kubernetes	
			
						
Next Session ::

		Demo :: Banking Application using Docker & Kubernetes
			
			CICD ::	Demo.
			
				Jenkins_Master					# jdk,jenkins,git
					Jenkin_Slave(Build_Server)	# git,jdk,maven,docker
				Kubernetes_Master				# cri,kubelet,kubectl,kubeadm,...
					Kubernetes_WorkerNode1
					Kubernetes_WorkerNode2			
			
			
			
				Infra-Structure ::		VM for Ansible Controller
					Jenkin_Slave(Build_Server)		# git,jdk,maven,docker
					Monitoring						# Prometheus & Grafana
					
						Create Build_Server using Terraform 
						Configure Build Tools using Ansible 			
			
		
		
########################
Day 15 - 8th July 2024
########################		
		
		
		CICD Pipeline Job/Project :::
		
			CICD Pipeline : To Automate Build & Deployment of Containerized Applications
			
				SCM_Checkout
				Application Build
				Docker Image Build 
				Login to DockerHub Registry
				Publish Docker Image to Container Registry 
				Deploy to Kubernetes	
		
		
		Source Code Repository is the Input 
		
		
			Build Configuration 
				MVN - pom.xml
		
	- DevOps CICD Pipeline Trigger/Execution WorkFlow :::
	
		Developers' Role :
		
			1. In Dev Environment, Developers use IDEs like (Eclipse/Visual Studio/Visual Studio Code/Pycharm)
			
			2. Push the Source Code Changes to Remote Repository(Github) thru IDEs 
		
		Thru DevOps Automation :
		
			3. GITHUB Webhook to Trigger the CICD Pipeline
			
			4. - SCM_Checkout 
			   - Application_Build using Maven 
			   - Application Image Build using Docker 
	           - Published to Container Registry(Dockerhub)
	           - Deploy the Container Image in the Kubernetes Cluster			

- Goto as per project document: https://github.com/StarAgileDevOpsTraining/star-agile-banking-finance		
		
- Fork this Repository 

- Clone the repository in Local Machine

- Make Necessary Changes In Dev Environment, Developers use IDEs like (Eclipse/Visual Studio/Visual Studio Code/Pycharm)

- Push the Source Code Changes to Remote Repository(Github) thru IDEs 

- Create CICD Pipeline ::

	- Create Jenkin Master and Slave Node
	- Integrate Jenkins Slave Node with Jenkins Master Node 
	- Goto Docker Hub, Create DockerHub Access Token
	- Goto Manage Jenkins --> Credentials --> Create New Credentials - username and password type
	- Install Publish Over SSH Plugins 
	- Goto Manage Jenkins --> System Configuration --> Configuration Kubernetes Master using Publish over SSH Settings 
	
	



pipeline {

    agent { label 'slave1' }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM_Checkout ') {
            steps {
                echo 'Perform SCM Checkout'
                git 'https://github.com/SA-DevOps-June24/Banking.git'
            }
		  post {
			success {
			  sh "echo 'Send mail on failure'"
				mail bcc: 'loksaieta223@gmail.com', body: "SCM Checkout Successful", cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'SCM Checkout Successful', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
			}
			failure {
			  sh "echo 'Send mail on failure'"
				mail bcc: 'loksaieta223@gmail.com', body: "SCM Checkout Failed", cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'SCM Checkout Failed', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
			}
		  }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
                sh 'mvn clean package'
            }
		  post {
			success {
			  sh "echo 'Send mail on failure'"
				mail bcc: 'loksaieta223@gmail.com', body: "The Job Status", cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'App_Build Success', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
			}
			failure {
			  sh "echo 'Send mail on failure'"
				mail bcc: 'loksaieta223@gmail.com', body: "The Job Status", cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'App_Build Failure', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
			}
		  }
        }
	
        stage('Build Docker Image') {
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/bankapp-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/bankapp-eta-app:${BUILD_NUMBER} loksaieta/bankapp-eta-app:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/bankapp-eta-app:latest"
			}
		}
		stage('Deploy to Kubernetes_Cluster') {
			steps {
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes_Cluster', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f kubernetesdeploy.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'kubernetesdeploy.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}				
			}
		}
	}
}		
		


smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#
App Password = 16 bytes of App Password. vsdfasdasasdfsdzr 
What ? window
Which Appln - email		
		
		
	
